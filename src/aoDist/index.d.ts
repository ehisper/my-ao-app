import Arweave from 'arweave';
import type { CommonObject, DataItems, KeyInfo, PriceInfo } from './index.d';
/**
 * Encrypt data and upload encrypted data to AR.
 *
 * @param data - plain data need to encrypt and upload
 * @param dataTag - the data meta info
 * @param priceInfo - The data price symbol and price, now only supports AO’s test token AOCRED
 * @param wallet - The ar wallet json object
 * @param arweave - Arweave object generated by arweave-js init method and default is AR production
 * @returns The uploaded encrypted data id
 */
export declare const uploadData: (data: Uint8Array, dataTag: CommonObject, priceInfo: PriceInfo, wallet: any, arweave?: Arweave) => Promise<string>;
export declare const listData: () => Promise<DataItems>;
/**
 * Generate key pair for encrypt/decrypt
 *
 * @returns The key-pair object
 */
export declare const generateKey: () => Promise<KeyInfo>;
/**
 * Submit a task to PADO Network
 *
 * @param dataId - The data id
 * @param dataUserPk - The user's public key generated by keygen
 * @param wallet - The ar wallet json object
 * @returns The submited task id
 */
export declare const submitTask: (dataId: string, dataUserPk: string, wallet: any) => Promise<string>;
/**
 * Get the result of the task
 *
 * @param taskId The task id
 * @param dataUserSk - The user's secret key generated by keygen
 * @param arweave - Arweave object generated by arweave-js init method and default is AR production
 * @param timeout Timeout in milliseconds (default: 10 seconds)
 * @returns The data
 */
export declare const getResult: (taskId: string, dataUserSk: string, arweave?: Arweave, timeout?: number) => Promise<Uint8Array>;
/**
 * Submit a task to AO and get the result. The combination of submitTask and getResult
 *
 * @param dataId - The data id
 * @param pk - The user's public key generated by keygen
 * @param sk - The user's secret key generated by keygen
 * @param wallet - The ar wallet
 * @param arweave - The ar object and default is ar production
 * @param timeout Timeout in milliseconds (default: 10 seconds)
 * @returns The data
 */
export declare const submitTaskAndGetResult: (dataId: string, dataUserPk: string, dataUserSk: string, wallet: any, arweave?: Arweave, timeout?: number) => Promise<Uint8Array>;
/**
 * Get the computing price of each node for each task. Now only supports AO’s test token AOCRED, minimum unit to use AOCRED(1 means 0.001 AOCRED)
 *
 * @returns The computing price of a node
 */
export declare const getComputationPrice: () => Promise<string>;
